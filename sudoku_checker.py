# -*- coding: utf-8 -*-
"""sudoku_checker.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1n96gsy4LJmzyQmMH5vRCXjG-FeY2995h
"""

import random
import pprint
from collections import Counter

class Sudoku:

  def __init__(self):

    self.full_board = []
    self.mixed_board = []

  def fill_small_square(self):
    self.small_square = []
    self.nums = ['1', '2', '3', '4', '5', '6', '7', '8', '9']

    for index in range(9):
      item = random.choice(self.nums)
      self.small_square.append(item)
      self.nums.remove(item)
 
    return self.small_square

  def fill_board(self):
    for index in range(9):
      item = self.fill_small_square()
      self.full_board.append(item)

    return self.full_board

  def mix_row(self, list_of_elements, a, b, c):
    row = list_of_elements[a][0:3] + list_of_elements[b][0:3] + list_of_elements[c][0:3]
    row2 = list_of_elements[a][3:6] + list_of_elements[b][3:6] + list_of_elements[c][3:6]
    row3 = list_of_elements[a][6:9] + list_of_elements[b][6:9] + list_of_elements[c][6:9]

    self.mixed_board.append(row)
    self.mixed_board.append(row2)
    self.mixed_board.append(row3)

  def fill_mixed_board(self):

    self.mix_row(self.full_board, 0, 1, 2)
    self.mix_row(self.full_board, 3, 4, 5)
    self.mix_row(self.full_board, 6, 7, 8)

    return self.mixed_board



  def print_board(self):
    self.fill_board()
    self.board = self.fill_mixed_board()
    
    for item in range(9):
      if item % 3 == 0 and item != 0:
        print("- - - - - - - - - - - -")
      for index in range(len(self.board[0])):
        if index % 3 == 0 and index !=0:
          print(" | ", end="")
        if index == 8:
          print(self.board[item][index])
        else:
          print(self.board[item][index] + " ", end="")

  def check_rows(self):   
    for row in self.mixed_board:
      if len(Counter(row).keys()) != 9:
        print(f"Duplicates in row {row}")
      else:
        print("All rows are correct")

  def check_columns(self):
    
    list_of_numbers = [i for i in range(10)]
    list_of_values = []
    list_of_columns = []

    for row in self.board:
      for item in row:
        list_of_values.append(item)

    for item in list_of_numbers:
      list_column = []
      for index in range(item, len(list_of_values), 9):
        list_column.append(list_of_values[index])
      list_of_columns.append(list_column)

    for row in list_of_columns:
      if len(Counter(row).keys()) != 9:
        print(f"Duplicates in column {row}")
      else:
        print("All columns are without duplicates")

object_sudoku = Sudoku()
print(object_sudoku.print_board())
print(object_sudoku.check_rows())
print(object_sudoku.check_columns())

